<?phpdefined('BASEPATH') OR exit('No direct script access allowed');class Question_difficulty_level_model extends CI_Model{    //input values    public function input_values()    {		$data = array(            'lang_id' => $this->input->post('lang_id', true),            'difficulty_level' => $this->input->post('difficulty_level', true),            'short_desc' => $this->input->post('short_desc', true),            'large_desc' => $this->input->post('large_desc', true),            'status' => $this->input->post('status', true),        );        return $data;    }    //add    public function add()    {        $data = $this->input_values();        return $this->db->insert('question_difficulty_level', $data);    }    //update    public function update($id)    {        //set values        $data = $this->input_values();        $this->db->where('id', $id);        return $this->db->update('question_difficulty_level', $data);    }	    //get all data    public function get_all_difficulty_levels()    {        $this->db->order_by('question_difficulty_level.difficulty_level', 'ASC');        $query = $this->db->get('question_difficulty_level');        return $query->result();    }    //get data by id    public function get_difficulty_level($id)    {        $this->db->where('question_difficulty_level.id', $id);        $query = $this->db->get('question_difficulty_level');        return $query->row();    }    //get unique    public function get_difficulty_level_by_name($difficulty_level)    {        $this->db->where('question_difficulty_level.difficulty_level', $difficulty_level);        $query = $this->db->get('question_difficulty_level');        return $query->row();    }        //delete    public function delete($id)    {        $difficulty_level = $this->get_difficulty_level($id);        if (!empty($difficulty_level)) {			$this->db->where('question_difficulty_level.id', $id);            return $this->db->delete('question_difficulty_level');        } else {            return false;        }    }	    //check if field is unique    public function is_unique_field($difficulty_level, $difficulty_id = 0)    {        $difficulty_level = $this->question_difficulty_level_model->get_difficulty_level_by_name($difficulty_level);         //if id doesnt exists        if ($difficulty_id == 0)         {            if (empty($city))             {                return true;            }             else             {                return false;            }        }        if ($difficulty_id != 0)         {            if (!empty($difficulty_level) && $difficulty_level->id == $difficulty_id)             {                //field taken                return true;            }             else             {                return false;            }        }    }}