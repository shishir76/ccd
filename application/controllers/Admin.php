<?phpdefined('BASEPATH') OR exit('No direct script access allowed');class Admin extends Admin_Core_Controller{    public function __construct()    {        parent::__construct();        $this->load->library('bcrypt');        prp_urlx();        //check auth        if (!is_admin() && !is_author() && !is_contributor()) {            redirect('admin/login');        }        //check permission        if (!show_admin_panel()) {            redirect('admin/login');        }        $this->file_count = 48;        $this->file_per_page = 12;    }    /**     * Index Page     */    public function index()    {        $data['title'] = trans("index");        $data['last_comments'] = $this->comment_model->get_last_comments(5);        $data['last_newsletter'] = $this->newsletter_model->get_last_newsletter(5);        $data['last_contacts'] = $this->contact_model->get_last_contact_messages();        $data['last_users'] = $this->auth_model->get_last_users();        $data['post_count'] = $this->post_admin_model->get_posts_count();        $data['pending_post_count'] = $this->post_admin_model->get_pending_posts_count();        $data['drafts_count'] = $this->post_admin_model->get_drafts_count();        $data['scheduled_post_count'] = $this->post_admin_model->get_scheduled_posts_count();        $this->load->view('admin/includes/_header', $data);        $this->load->view('admin/index', $data);        $this->load->view('admin/includes/_footer');    }    /**     * Navigation     */    public function navigation()    {        prevent_author();        $data['title'] = trans("navigation");        $data['menu_links'] = $this->navigation_model->get_menu_links_by_lang($this->general_settings->site_lang);        $data['lang_search_column'] = 3;        $this->load->view('admin/includes/_header', $data);        $this->load->view('admin/navigation/navigation', $data);        $this->load->view('admin/includes/_footer');    }    public function post_url()    {        prevent_author();        header("Content-type: application/json; charset=utf-8");        $data['title'] = trans("post_urls");        $data['post_url'] = $this->post_admin_model->all_post_url();        echo json_encode($data['post_url']);              // $this->load->view('admin/includes/_header', $data);        // $this->load->view('admin/post/post_url', $data);        // $this->load->view('admin/includes/_footer');    }    public function update_post_url($id = NULL)    {        prevent_author();        $data['title'] = trans("post_urls");        if ($this->input->get('id')) {            $id = $this->input->get('id');        }        $post = $this->post_admin_model->get_post($id);        if($post->helo_flag==1)        {            $data = array(                'helo_flag' => $post->helo_flag + 1            );            $this->db->where(['id'=> $post->id,'helo_flag'=>1]);            if($this->db->update('posts', $data))            {                echo "Helo Flag successfully updated!";            }        }        else        {            echo "Helo Flag already updated!";        }    }    /**     * Add Menu Link Post     */    public function add_menu_link_post()    {        //validate inputs        $this->form_validation->set_rules('title', trans("title"), 'required|xss_clean|max_length[500]');        if ($this->form_validation->run() === false) {            $this->session->set_flashdata('errors_form', validation_errors());            $this->session->set_flashdata('form_data', $this->navigation_model->input_values());            redirect($this->agent->referrer());        } else {            if ($this->navigation_model->add_link()) {                $this->session->set_flashdata('success_form', trans("link") . " " . trans("msg_suc_added"));                redirect($this->agent->referrer());            } else {                $this->session->set_flashdata('form_data', $this->navigation_model->input_values());                $this->session->set_flashdata('error_form', trans("msg_error"));                redirect($this->agent->referrer());            }        }    }    /**     * Update Menu Link     */    public function update_menu_link()    {        prevent_author();        $data['title'] = trans("navigation");        $id = $this->input->get("id");        $data['page'] = $this->page_model->get_page_by_id($id);        $data['menu_links'] = $this->navigation_model->get_menu_links_by_lang($data['page']->lang_id);        $this->load->view('admin/includes/_header', $data);        $this->load->view('admin/navigation/update_navigation', $data);        $this->load->view('admin/includes/_footer');    }    /**     * Update MenÃ¼ Link Post     */    public function update_menu_link_post()    {        //validate inputs        $this->form_validation->set_rules('title', trans("title"), 'required|xss_clean|max_length[500]');        if ($this->form_validation->run() === false) {            $this->session->set_flashdata('errors_form', validation_errors());            $this->session->set_flashdata('form_data', $this->navigation_model->input_values());            redirect($this->agent->referrer());        } else {            $id = $this->input->post('id', true);            if ($this->navigation_model->update_link($id)) {                $this->session->set_flashdata('success', trans("link") . " " . trans("msg_suc_updated"));                redirect("admin/navigation");            } else {                $this->session->set_flashdata('form_data', $this->navigation_model->input_values());                $this->session->set_flashdata('error_form', trans("msg_error"));                redirect($this->agent->referrer());            }        }    }    /**     * Delete Navigation Post     */    public function delete_navigation_post()    {        $id = $this->input->post('id', true);        $data["page"] = $this->page_model->get_page_by_id($id);        //check if exists        if (empty($data['page'])) {            redirect($this->agent->referrer());        }        if ($this->page_model->delete($id)) {            $this->session->set_flashdata('success', trans("link") . " " . trans("msg_suc_deleted"));            redirect($this->agent->referrer());        } else {            $this->session->set_flashdata('error', trans("msg_error"));            redirect($this->agent->referrer());        }    }    /**     * Menu Limit Post     */    public function menu_limit_post()    {        if ($this->navigation_model->update_menu_limit()) {            $this->session->set_flashdata('success_form', trans("menu_limit") . " " . trans("msg_suc_updated"));            $this->session->set_flashdata("mes_menu_limit", 1);            redirect($this->agent->referrer());        } else {            $this->session->set_flashdata('form_data', $this->navigation_model->input_values());            $this->session->set_flashdata("mes_menu_limit", 1);            $this->session->set_flashdata('error_form', trans("msg_error"));            redirect($this->agent->referrer());        }    }    //get menu links by language    public function get_menu_links_by_lang()    {        $lang_id = $this->input->post('lang_id', true);        if (!empty($lang_id)):            $menu_links = $this->navigation_model->get_menu_links_by_lang($lang_id);            foreach ($menu_links as $item):                if ($item["type"] != "category" && $item["location"] == "main" && $item['parent_id'] == "0"):                    echo ' <option value="' . $item["id"] . '">' . $item["title"] . '</option>';                endif;            endforeach;        endif;    }    /**     * Notifications     */    public function notification()    {        // prevent_author();        $data['title'] = trans("notification");        $data['users'] = $this->notification_model->get_users_by_role();         $this->notification_model->upadte_notification_status_by_user_id(user()->id);        $data['notifications'] = $this->notification_model->get_notifications();               $this->load->view('admin/includes/_header', $data);        $this->load->view('admin/notifications/notification', $data);        $this->load->view('admin/includes/_footer');    }     /**     * Add Notification Post     */    public function add_notification_post()    {        prevent_author();        if(isset($_POST['is_select_all']))        {            $data['notifications'] = $this->notification_model->get_users_by_role();            foreach ($data['notifications'] as $item) {                //send notification                $this->notification_model->add_to_notification($item->id);            }        }        else        {            $data = $this->notification_model->input_values();            $this->db->insert('notifications', $data);        }        $this->session->set_flashdata('success', trans("notification") . " " . trans("msg_suc_added"));        redirect($this->agent->referrer());    }    /**     * Delete Notification Post     */    public function delete_notification_post()    {        prevent_author();        $id = $this->input->post('id', true);        $data['notification'] = $this->notification_model->get_notification_by_id($id);        if (empty($data['notification'])) {            redirect($this->agent->referrer());        }        if ($this->notification_model->delete_from_notification($id)) {            $this->session->set_flashdata('success', trans("notification") . " " . trans("msg_suc_deleted"));            redirect($this->agent->referrer());        } else {            $this->session->set_flashdata('error', trans("msg_error"));            redirect($this->agent->referrer());        }    }    /**     * Delete Selected Notifications     */    public function delete_selected_notifications()    {        $notification_ids = $this->input->post('notification_ids', true);        $this->notification_model->delete_multi_notifications($notification_ids);    }    /**     * Editions     */    public function editions()    {        prevent_author();        $data['title'] = trans("edition");        $data['editions'] = $this->edition_model->get_editions();        $data['lang_search_column'] = 3;        $this->load->view('admin/includes/_header', $data);        $this->load->view('admin/editions/edition', $data);        $this->load->view('admin/includes/_footer');    }    /**     * Add Editions Post     */    public function add_editions_post()    {        //validate inputs        $this->form_validation->set_rules('name', trans("name"), 'xss_clean|max_length[255]');        if ($this->form_validation->run() === false) {            $this->session->set_flashdata('errors_form', validation_errors());            $this->session->set_flashdata('form_data', $this->edition_model->input_values());            redirect($this->agent->referrer());        } else {            if ($this->edition_model->add_to_editions()) {                $this->session->set_flashdata('success_form', trans("edition") . " " . trans("msg_suc_added"));                redirect($this->agent->referrer());            } else {                $this->session->set_flashdata('form_data', $this->edition_model->input_values());                $this->session->set_flashdata('error_form', trans("msg_error"));                redirect($this->agent->referrer());            }        }    }    /**     * Update Editions     */    public function update_editions($id)    {        $data['title'] = trans("update_edition");        //get post        $data['editions'] = $this->edition_model->get_editions_by_id($id);        if (empty($data['editions'])) {            redirect($this->agent->referrer());        }        $this->load->view('admin/includes/_header', $data);        $this->load->view('admin/editions/update_edition', $data);        $this->load->view('admin/includes/_footer');    }    /**     * Update Editions Post     */    public function update_editions_post()    {        //validate inputs        $this->form_validation->set_rules('name', trans("name"), 'xss_clean|max_length[255]');        if ($this->form_validation->run() === false) {            $this->session->set_flashdata('errors', validation_errors());            $this->session->set_flashdata('form_data', $this->edition_model->input_values());            redirect($this->agent->referrer());        } else {            $id = $this->input->post('id', true);            if ($this->edition_model->update_to_editions($id)) {                $this->session->set_flashdata('success', trans("edition") . " " . trans("msg_suc_updated"));                redirect('admin/editions');            } else {                $this->session->set_flashdata('form_data', $this->edition_model->input_values());                $this->session->set_flashdata('error', trans("msg_error"));                redirect($this->agent->referrer());            }        }    }    /**     * Delete Editions Post     */    public function delete_editions_post()    {        $id = $this->input->post('id', true);        if ($this->edition_model->delete_from_editions($id)) {            $this->session->set_flashdata('success', trans("edition") . " " . trans("msg_suc_deleted"));            redirect($this->agent->referrer());        } else {            $this->session->set_flashdata('error', trans("msg_error"));            redirect($this->agent->referrer());        }    }    /**     * Delete Selected Editions     */    public function delete_selected_editions()    {        $edition_ids = $this->input->post('edition_ids', true);        $this->edition_model->delete_multi_editions($edition_ids);    }    /**     * Epapers     */    public function epapers()    {        prevent_author();        $data['title'] = trans("epaper");        $data['epapers'] = $this->epaper_model->get_epaper_history();        $data['editions'] = $this->edition_model->get_editions();        $data['lang_search_column'] = 3;        $this->load->view('admin/includes/_header', $data);        $this->load->view('admin/epapers/epaper', $data);        $this->load->view('admin/includes/_footer');    }    /**     * Add Epapers Post     */    public function add_epapers_post()    {        //validate inputs        $this->form_validation->set_rules('title', trans("title"), 'xss_clean|max_length[255]');        if ($this->form_validation->run() === false) {            $this->session->set_flashdata('errors_form', validation_errors());            $this->session->set_flashdata('form_data', $this->epaper_model->input_values());            redirect($this->agent->referrer());        } else {            if ($this->epaper_model->add_to_epaper_history()) {                //last id                $last_id = $this->db->insert_id();                //insert post tags                $this->epaper_model->add_to_epaper_history_list($last_id);                $this->session->set_flashdata('success_form', trans("epaper") . " " . trans("msg_suc_added"));                redirect($this->agent->referrer());            } else {                $this->session->set_flashdata('form_data', $this->epaper_model->input_values());                $this->session->set_flashdata('error_form', trans("msg_error"));                redirect($this->agent->referrer());            }        }    }    /**     * Update Epapers     */    public function update_epapers($id)    {        $data['title'] = trans("update_epaper");        //get epaper history        $data['epaper_history'] = $this->epaper_model->get_epaper_history_by_id($id);        $data['epaper_history_lists'] = $this->epaper_model->get_epaper_history_list($id);        $data['editions'] = $this->edition_model->get_editions();        if (empty($data['epaper_history'])) {            redirect($this->agent->referrer());        }        $this->load->view('admin/includes/_header', $data);        $this->load->view('admin/epapers/update_epaper', $data);        $this->load->view('admin/includes/_footer');    }    /**     * Update Epapers Post     */    public function update_epapers_post()    {        //validate inputs        $this->form_validation->set_rules('title', trans("title"), 'xss_clean|max_length[255]');        if ($this->form_validation->run() === false) {            $this->session->set_flashdata('errors', validation_errors());            $this->session->set_flashdata('form_data', $this->epaper_model->input_values());            redirect($this->agent->referrer());        } else {            $id = $this->input->post('id', true);            if ($this->epaper_model->update_to_epaper_history($id)) {                //update epaper history list                $this->epaper_model->update_to_epaper_history_list($id);                $this->session->set_flashdata('success', trans("epaper") . " " . trans("msg_suc_updated"));                redirect('admin/epapers');            } else {                $this->session->set_flashdata('form_data', $this->epaper_model->input_values());                $this->session->set_flashdata('error', trans("msg_error"));                redirect($this->agent->referrer());            }        }    }    /**     * Delete Epapers Post     */    public function delete_epapers_post()    {        $id = $this->input->post('id', true);        if ($this->epaper_model->delete_from_epaper_history($id)) {            $this->session->set_flashdata('success', trans("epaper") . " " . trans("msg_suc_deleted"));            redirect($this->agent->referrer());        } else {            $this->session->set_flashdata('error', trans("msg_error"));            redirect($this->agent->referrer());        }    }    /**     * Delete Selected Epapers     */    public function delete_selected_epapers()    {        $epaper_ids = $this->input->post('epaper_ids', true);        $this->epaper_model->delete_multi_epaper_history($epaper_ids);    }    /**     * Update Profile     */    public function update_profile($id)    {        $data['title'] = trans("update_profile");        $data['user'] = $this->auth_model->get_user($id);        //check admin        if (!is_admin()) {            if (user()->id != $id) {                redirect('admin/users');            }        }        //user not found        if (empty($data['user'])) {            redirect('admin');        }        $this->load->view('admin/includes/_header', $data);        $this->load->view('admin/update_profile', $data);        $this->load->view('admin/includes/_footer');    }    /**     * Update Profile Post     */    public function update_profile_post()    {        $id = $this->input->post('id', true);        $slug = $this->input->post('slug', true);        $user = $this->auth_model->get_user($id);        //user not found        if (empty($user)) {            redirect('admin');        }        //check admin        if (!is_admin()) {            if (user()->id != $id) {                redirect('admin/users');            }        }        //check slug        $user_slug = $this->auth_model->get_user_by_slug($slug);        if (!empty($user_slug)) {            if ($user_slug->id != $user->id) {                $this->session->set_flashdata('error', trans("msg_slug_used"));                redirect($this->agent->referrer());            }        }        if ($this->auth_model->update_author($id)) {            $this->session->set_flashdata('success', trans("profile") . " " . trans("msg_suc_updated"));        } else {            $this->session->set_flashdata('error', trans("msg_error"));        }        redirect($this->agent->referrer());    }    /**     * Change Password     */    public function update_password($id)    {        $data['title'] = trans("update_password");        $data['user'] = $this->auth_model->get_user($id);        //$data["user"] = user();        //check admin        if (!is_admin()) {            if (user()->id != $id) {                redirect('admin/update_password');            }        }        //user not found        if (empty($data['user'])) {            redirect('admin');        }        $this->load->view('admin/includes/_header', $data);        $this->load->view('admin/update_password',$data);        $this->load->view('admin/includes/_footer');    }    /**     * Change Password Post     */    public function update_password_post()    {        $id = $this->input->post('id', true);        $user = $this->auth_model->get_user($id);        //user not found        if (empty($user)) {            redirect('admin');        }        //check admin        if (!is_admin()) {            if (user()->id != $id) {                redirect('admin/update_password');            }        }        $old_password_empty = $this->input->post('old_password_empty', true);        if ($old_password_empty == 1) {            $this->form_validation->set_rules('old_password', html_escape(trans("form_old_password")), 'required|xss_clean|max_length[50]');        }        $this->form_validation->set_rules('password', html_escape(trans("form_new_password")), 'required|xss_clean|min_length[4]|max_length[50]');        $this->form_validation->set_rules('password_confirmation', html_escape(trans("form_confirm_password")), 'required|xss_clean|max_length[50]|matches[password]');        if ($this->form_validation->run() == false) {            $this->session->set_flashdata('errors', validation_errors());            $this->session->set_flashdata('form_data', $this->auth_model->change_password_input_values());            redirect($this->agent->referrer());        } else {            if ($this->auth_model->change_password($old_password_empty,$id)) {                $this->session->set_flashdata('success', html_escape(trans("message_change_password_success")));                redirect($this->agent->referrer());            } else {                $this->session->set_flashdata('error', html_escape(trans("message_change_password_error")));                redirect($this->agent->referrer());            }        }    }    /**     * Reset Password     */    public function reset_password($id)    {        $data['title'] = trans("reset_password");        $data['user'] = $this->auth_model->get_user($id);        //check admin        if (!is_admin()) {            if (user()->id != $id) {                redirect('admin/users');            }        }        //user not found        if (empty($data['user'])) {            redirect('admin');        }        $this->load->view('admin/includes/_header', $data);        $this->load->view('admin/reset_password', $data);        $this->load->view('admin/includes/_footer');    }    /**     * Reset Password Post     */    public function reset_password_post()    {        $id = $this->input->post('id', true);        $user = $this->auth_model->get_user($id);        //user not found        if (empty($user)) {            redirect('admin');        }        //check admin        if (!is_admin()) {            if (user()->id != $id) {                redirect('admin/users');            }        }        $this->form_validation->set_rules('new_password', html_escape(trans("form_new_password")), 'required|xss_clean|min_length[4]|max_length[50]');        $this->form_validation->set_rules('confirm_password', html_escape(trans("form_confirm_password")), 'required|xss_clean|max_length[50]|matches[new_password]');        if ($this->form_validation->run() == false) {            $this->session->set_flashdata('errors', validation_errors());            $this->session->set_flashdata('form_data', $this->auth_model->reset_password_input_values());            redirect($this->agent->referrer());        } else {            if ($this->auth_model->update_reset_password($id)) {                $this->session->set_flashdata('success', trans("form_password") . " " . trans("msg_suc_updated"));            } else {                $this->session->set_flashdata('error', trans("msg_error"));            }            redirect($this->agent->referrer());         }    }    /**     * Comments     */    public function comments()    {        prevent_author();        $data['title'] = trans("comments");            $this->comment_model->update_comments_seen_status();        $data['comments'] = $this->comment_model->get_all_comments();        $this->load->view('admin/includes/_header', $data);        $this->load->view('admin/comments', $data);        $this->load->view('admin/includes/_footer');    }    /**     * Delete Comment Post     */    public function delete_comment_post()    {        prevent_author();        $option = $this->input->post('option', true);        $id = $this->input->post('id', true);        //if option delete        if ($option == 'delete') {            if ($this->comment_model->delete_comment($id)) {                $this->session->set_flashdata('success', trans("comment") . " " . trans("msg_suc_deleted"));                redirect($this->agent->referrer());            } else {                $this->session->set_flashdata('error', trans("msg_error"));                redirect($this->agent->referrer());            }        }        //if option approve        if ($option == 'approve') {            if ($this->comment_model->approve_comment($id)) {                $this->session->set_flashdata('success', trans("msg_comment_approved"));                redirect($this->agent->referrer());            } else {                $this->session->set_flashdata('error', trans("msg_error"));                redirect($this->agent->referrer());            }        }        //if option remove ban        if ($option == 'disapprove') {            if ($this->comment_model->disapprove_comment($id)) {                $this->session->set_flashdata('success', trans("msg_comment_disapproved"));                redirect($this->agent->referrer());            } else {                $this->session->set_flashdata('error', trans("msg_error"));                redirect($this->agent->referrer());            }        }    }    /**     * Contact Messages     */    public function contact_messages()    {        prevent_author();        $data['title'] = trans("contact_messages");          $this->contact_model->upadte_message_status();        $data['messages'] = $this->contact_model->get_contact_messages();        $this->load->view('admin/includes/_header', $data);        $this->load->view('admin/contact_messages', $data);        $this->load->view('admin/includes/_footer');    }  /**     * Contact Messages     */    public function readcontact_messages()    {       $id = $this->input->get('id');        if (!empty($id)){            $contact_message = $this->contact_model->read_contact_message($id);                                echo $contact_message->message ;               }           }    /**     * Delete Contact Message Post     */    public function delete_contact_message_post()    {        prevent_author();        $id = $this->input->post('id', true);        if ($this->contact_model->delete_contact_message($id)) {            $this->session->set_flashdata('success', trans("message") . " " . trans("msg_suc_deleted"));            redirect($this->agent->referrer());        } else {            $this->session->set_flashdata('error', trans("msg_error"));            redirect($this->agent->referrer());        }    } /**     * Delete Selected Posts     */    public function delete_selected_messages()    {        $message_ids = $this->input->post('message_ids', true);               $this->contact_model->delete_multi_messages($message_ids);    }    /**     * Ads     */    public function ad_spaces()    {        // prevent_author();        $data['title'] = trans("ad_spaces");        $data['ad_space'] = $this->input->get('ad_space', true);        $data['top_categories'] = $this->category_model->get_categories();                if (empty($data['ad_space'])) {            redirect("admin/ad_spaces?ad_space=header");        }        $data['ad_codes'] = $this->ad_model->get_ad_codes($data['ad_space']);        if (empty($data['ad_codes'])) {            redirect("admin/ad_spaces");        }        $data["array_ad_spaces"] = array(            "header" => trans("header_top_ad_space"),            "index_top" => trans("index_top_ad_space"),            "index_bottom" => trans("index_bottom_ad_space"),            "post_top" => trans("post_top_ad_space"),            "post_mid" => trans("post_mid_ad_space"),            "post_bottom" => trans("post_bottom_ad_space"),            "posts_top" => trans("posts_top_ad_space"),            "posts_bottom" => trans("posts_bottom_ad_space"),            "category_top" => trans("category_top_ad_space"),            "category_bottom" => trans("category_bottom_ad_space"),            "tag_top" => trans("tag_top_ad_space"),            "tag_bottom" => trans("tag_bottom_ad_space"),            "search_top" => trans("search_top_ad_space"),            "search_bottom" => trans("search_bottom_ad_space"),            "profile_top" => trans("profile_top_ad_space"),            "profile_bottom" => trans("profile_bottom_ad_space"),            "reading_list_top" => trans("reading_list_top_ad_space"),            "reading_list_bottom" => trans("reading_list_bottom_ad_space"),            "sidebar_top" => trans("sidebar_top_ad_space"),            "sidebar_bottom" => trans("sidebar_bottom_ad_space"),             "epaper_left" => trans("epaper_left"),              "epaper_right" => trans("epaper_right"),              "ad_model" => trans("ad_model"),                      "category_block_top" => trans("category_block_top")          );        $this->load->view('admin/includes/_header', $data);        $this->load->view('admin/ad_spaces', $data);        $this->load->view('admin/includes/_footer');    }    /**     * Ads Post     */    public function ad_spaces_post()    {        // prevent_author();        $ad_space = $this->input->post('ad_space', true);        if ($this->ad_model->update_ad_spaces($ad_space)) {            $this->session->set_flashdata('success', trans("ad_spaces") . " " . trans("msg_suc_updated"));        } else {            $this->session->set_flashdata('error', trans("msg_error"));        }        redirect("admin/ad_spaces?ad_space=" . $ad_space);    }    /**     * Settings     */    public function settings()    {        prevent_author();        $data["selected_lang"] = $this->input->get("lang", true);        if (empty($data["selected_lang"])) {            $data["selected_lang"] = $this->general_settings->site_lang;            redirect("admin/settings?lang=" . $data["selected_lang"]);        }        $data['title'] = trans("settings");        $data['settings'] = $this->settings_model->get_settings($data["selected_lang"]);        $this->load->view('admin/includes/_header', $data);        $this->load->view('admin/settings', $data);        $this->load->view('admin/includes/_footer');    }    /**     * Update Settings Post     */    public function settings_post()    {        prevent_author();        if ($this->settings_model->update_settings()) {            $this->session->set_flashdata('success', trans("settings") . " " . trans("msg_suc_updated"));            $this->session->set_flashdata("mes_settings", 1);            redirect($this->agent->referrer());        } else {            $this->session->set_flashdata('error', trans("msg_error"));            $this->session->set_flashdata("mes_settings", 1);            redirect($this->agent->referrer());        }    }    /**     * Recaptcha Settings Post     */    public function recaptcha_settings_post()    {        prevent_author();        if ($this->settings_model->update_recaptcha_settings()) {            $this->session->set_flashdata('success', trans("settings") . " " . trans("msg_suc_updated"));            redirect($this->agent->referrer());        } else {            $this->session->set_flashdata('error', trans("msg_error"));            redirect($this->agent->referrer());        }    }    /**     * Preferences     */    public function preferences()    {        prevent_author();        $data['title'] = trans("preferences");        $data['top_categories'] = $this->category_model->get_categories();        $this->load->view('admin/includes/_header', $data);        $this->load->view('admin/preferences', $data);        $this->load->view('admin/includes/_footer');    }    /**     * Preferences Post     */    public function preferences_post()    {        prevent_author();        $this->db->where('id', 1);                $query = $this->db->get('general_settings');        $result=$query->row();          if($this->input->post('db_backup_password_new')!="" && $this->input->post('db_backup_password_old')!=""){         $new_database_password="";        $old_database_password=$this->input->post('db_backup_password_old');                       if($result->db_backup_password==$old_database_password ){            if($this->input->post('db_backup_password_new')!=''){             $new_database_password=$this->input->post('db_backup_password_new');              $this->session->set_flashdata('success', trans("preferences") . " " . trans("message_change_password_success"));                       }                   }        else{            $this->session->set_flashdata('error', trans("message_change_password_error"));            redirect($this->agent->referrer());             $new_database_password=$result->db_backup_password;        }        }        else{                       $new_database_password=$result->db_backup_password;        }                $data = array(            'multilingual_system' => $this->input->post('multilingual_system', true),            'registration_system' => $this->input->post('registration_system', true),            'comment_system' => $this->input->post('comment_system', true),            'facebook_comment_active' => $this->input->post('facebook_comment_active', true),            'emoji_reactions' => $this->input->post('emoji_reactions', true),            'newsletter' => $this->input->post('newsletter', true),            'show_rss' => $this->input->post('show_rss', true),            'show_featured_section' => $this->input->post('show_featured_section', true),            'show_latest_posts' => $this->input->post('show_latest_posts', true),            'show_newsticker' => $this->input->post('show_newsticker', true),            'show_post_author' => $this->input->post('show_post_author', true),            'show_post_date' => $this->input->post('show_post_date', true),            'show_hits' => $this->input->post('show_hits', true),            'show_copy_paste' => $this->input->post('show_copy_paste', true),            'auto_refresh_theme' => $this->input->post('auto_refresh_theme', true),            'show_notification' => $this->input->post('show_notification', true),            'show_breaking_news' => $this->input->post('show_breaking_news', true),            'show_social_sharing_link' => $this->input->post('show_social_sharing_link', true),            'show_social_sharing_link_bottom' => $this->input->post('show_social_sharing_link_bottom', true),            'show_android_app_url' => $this->input->post('show_android_app_url', true),            'show_apple_app_url' => $this->input->post('show_apple_app_url', true),            'show_epaper_menu' => $this->input->post('show_epaper_menu', true),             'show_ad_model' => $this->input->post('add_model', true),            'pagination_per_page' => $this->input->post('pagination_per_page', true),            'post_limit' => $this->input->post('post_limit', true),            'paragraph_interval' => $this->input->post('paragraph_interval', true),            'db_backup_password' =>  $new_database_password,            'ad_blocker_script' => $this->input->post('ad_blocker_script', true),            'show_cricket_report' =>  $this->input->post('show_cricket_report', true),            'related_link_type' =>  $this->input->post('related_link_type', true),            'related_post_link_limit' => $this->input->post('related_post_link_limit', true),            'related_link_category' =>  $this->input->post('related_link_category', true),            'home_buton_style' =>  $this->input->post('home_buton_style', true),            'featured_image' =>  $this->input->post('featured_image', true),            'top_menu_color' =>  $this->input->post('top_menu_color', true),            'top_menu_bg_color' =>  $this->input->post('top_menu_bg_color', true),            'navigation_color' =>  $this->input->post('navigation_color', true),            'navigation_bg_color' =>  $this->input->post('navigation_bg_color', true),            'navigation_active_bg_color' =>  $this->input->post('navigation_active_bg_color', true),            'navigation_post' =>  $this->input->post('navigation_post', true),            'show_weather_report' => $this->input->post('show_weather_report', true),            'featured_block' => $this->input->post('featured_block', true),            'footer_color' =>  $this->input->post('footer_color', true),            'footer_bg_color' =>  $this->input->post('footer_bg_color', true)        );           if($data['related_link_category']==1){             $category_IDs="";          if (!empty($this->input->post('related_link_excluded_cat'))) {            $category_ids=$this->input->post('related_link_excluded_cat');                                foreach ($category_ids as $category_id)                {                    if($category_IDs==""){                        $category_IDs=$category_id;                    }                     else{                        $category_IDs=$category_IDs.",".$category_id;                    }                   }                             }            $data["related_link_excluded_cat"] = $category_IDs;         }        else{ $data["related_link_excluded_cat"] = "";}          if ($this->settings_model->update_preferences($data)) {            $this->session->set_flashdata('success', trans("preferences") . " " . trans("msg_suc_updated"));            redirect($this->agent->referrer());        } else {            $this->session->set_flashdata('error', trans("msg_error"));            redirect($this->agent->referrer());        }    }    /**     * Visual Settings     */    public function visual_settings()    {        prevent_author();        $data['title'] = trans("visual_settings");        $data['visual_settings'] = $this->visual_settings_model->get_settings();        $this->load->view('admin/includes/_header', $data);        $this->load->view('admin/visual_settings', $data);        $this->load->view('admin/includes/_footer');    }    /**     * Update Settings Post     */    public function visual_settings_post()    {        if ($this->visual_settings_model->update_settings()) {            $this->session->set_flashdata('success', trans("visual_settings") . " " . trans("msg_suc_updated"));            redirect($this->agent->referrer());        } else {            $this->session->set_flashdata('error', trans("msg_error"));            redirect($this->agent->referrer());        }    }    /**     * Email Settings     */    public function email_settings()    {        prevent_author();        $data['title'] = trans("email_settings");        $this->load->view('admin/includes/_header', $data);        $this->load->view('admin/email_settings', $data);        $this->load->view('admin/includes/_footer');    }    /**     * Update Email Settings Post     */    public function email_settings_post()    {        if ($this->settings_model->update_email_settings()) {            $this->session->set_flashdata('success', trans("email_settings") . " " . trans("msg_suc_updated"));            redirect($this->agent->referrer());        } else {            $this->session->set_flashdata('error', trans("msg_error"));            redirect($this->agent->referrer());        }    }    /**     * Newsletter     */    public function newsletter()    {        prevent_author();        $data['title'] = trans("newsletter");        $this->newsletter_model->update_newsletter_seen_status();        $data['newsletter'] = $this->newsletter_model->get_newsletters();        $this->load->view('admin/includes/_header', $data);        $this->load->view('admin/newsletter', $data);        $this->load->view('admin/includes/_footer');    }    /**     * Delete Newsletter Post     */    public function delete_newsletter_post()    {        prevent_author();        $id = $this->input->post('id', true);        $data['newsletter'] = $this->newsletter_model->get_newsletter_by_id($id);        if (empty($data['newsletter'])) {            redirect($this->agent->referrer());        }        if ($this->newsletter_model->delete_from_newsletter($id)) {            $this->session->set_flashdata('success', trans("email") . " " . trans("msg_suc_deleted"));            redirect($this->agent->referrer());        } else {            $this->session->set_flashdata('error', trans("msg_error"));            redirect($this->agent->referrer());        }    }    /**     * Newsletter Send Email Post     */    public function newsletter_send_email_post()    {        prevent_author();        $subject = $this->input->post('subject', true);        $message = $this->input->post('message', false);        $data['newsletter'] = $this->newsletter_model->get_newsletters();        foreach ($data['newsletter'] as $item) {            //send email            $this->email_model->send_email($item->email, $subject, $message);        }        $this->session->set_flashdata('success', trans("msg_email_sent"));        redirect($this->agent->referrer());    }    /**     * Seo Tools     */    public function seo_tools()    {        prevent_author();        $data['title'] = trans("seo_tools");        $data["selected_lang"] = $this->input->get("lang", true);        if (empty($data["selected_lang"])) {            $data["selected_lang"] = $this->general_settings->site_lang;            redirect("admin/seo_tools?lang=" . $data["selected_lang"]);        }        $data['settings'] = $this->settings_model->get_settings($data["selected_lang"]);        $this->load->view('admin/includes/_header', $data);        $this->load->view('admin/seo_tools', $data);        $this->load->view('admin/includes/_footer');    }    /**     * Seo Tools Post     */    public function seo_tools_post()    {        prevent_author();        if ($this->settings_model->update_seo_settings()) {            $this->session->set_flashdata('success', trans("seo_options") . " " . trans("msg_suc_updated"));            redirect($this->agent->referrer());        } else {            $this->session->set_flashdata('error', trans("msg_error"));            redirect($this->agent->referrer());        }    }    /**     * Social Login Configuration     */    public function social_login_configuration()    {        prevent_author();        $data['title'] = trans("social_login_configuration");        $this->load->view('admin/includes/_header', $data);        $this->load->view('admin/social_login', $data);        $this->load->view('admin/includes/_footer');    }    /**     * Social Login Configuration Post     */    public function social_login_configuration_post()    {        prevent_author();        if ($this->settings_model->update_social_settings()) {            $this->session->set_flashdata('success', trans("configurations") . " " . trans("msg_suc_updated"));            redirect($this->agent->referrer());        } else {            $this->session->set_flashdata('error', trans("msg_error"));            redirect($this->agent->referrer());        }    }    /**     * Font Options     */    public function font_options()    {        prevent_author();        $data['title'] = trans("font_options");        $this->config->load('fonts');        $data['fonts'] = $this->config->item('fonts_array');        $this->load->view('admin/includes/_header', $data);        $this->load->view('admin/font_options', $data);        $this->load->view('admin/includes/_footer');    }    /**     * Font Options Post     */    public function font_options_post()    {        prevent_author();        if ($this->settings_model->update_font_settings()) {            $this->session->set_flashdata('success', trans("fonts") . " " . trans("msg_suc_updated"));            redirect($this->agent->referrer());        } else {            $this->session->set_flashdata('error', trans("msg_error"));            redirect($this->agent->referrer());        }    }    /**     * Users     */    public function users()    {        prevent_author();        //check if admin        if (is_admin() == false) {            redirect('login');        }        $data['title'] = trans("users");        $data['users'] = $this->auth_model->get_users();        $this->load->view('admin/includes/_header', $data);        $this->load->view('admin/users', $data);        $this->load->view('admin/includes/_footer');    }    /**     * Get User Role     */    public function change_user_role()    {        if ($this->input->get('id'))         {            $id = $this->input->get('id');        }        $data['users_role'] = $this->auth_model->get_user_role($id);        $this->load->view('admin/_change_user_role', $data);    }    /**     * Change User Role     */    public function change_user_role_post()    {        prevent_author();        //check if admin        if (is_admin() == false) {            redirect('login');        }        $id = $this->input->post('user_id', true);        $role = $this->input->post('role', true);        $user = $this->auth_model->get_user($id);        //check if exists        if (empty($user)) {            redirect($this->agent->referrer());        } else {            if ($this->auth_model->change_user_role($id, $role)) {                $this->session->set_flashdata('success', trans("msg_role_changed"));                redirect($this->agent->referrer());            } else {                $this->session->set_flashdata('error', trans("msg_error"));                redirect($this->agent->referrer());            }        }    }    /**     * Delete Selected Comments     */    public function delete_selected_comments()    {        $comment_ids = $this->input->post('comment_ids', true);        $this->comment_model->delete_multi_comments($comment_ids);    }    /**     * User Options Post     */    public function user_options_post()    {        prevent_author();        //check if admin        if (is_admin() == false) {            redirect('login');        }        $option = $this->input->post('option', true);        $id = $this->input->post('id', true);        $logged_id = user()->id;        //if option delete        if ($option == 'delete') {            if ($this->auth_model->delete_user($id)) {                $this->session->set_flashdata('success', trans("user") . " " . trans("msg_suc_deleted"));                if ($id == $logged_id) {                    redirect("logout");                } else {                    redirect($this->agent->referrer());                }            } else {                $this->session->set_flashdata('error', trans("msg_error"));                redirect($this->agent->referrer());            }        }        //if option ban        if ($option == 'ban') {            if ($this->auth_model->ban_user($id)) {                $this->session->set_flashdata('success', trans("msg_user_banned"));                redirect($this->agent->referrer());            } else {                $this->session->set_flashdata('error', trans("msg_error"));                redirect($this->agent->referrer());            }        }        //if option remove ban        if ($option == 'remove_ban') {            if ($this->auth_model->remove_user_ban($id)) {                $this->session->set_flashdata('success', trans("msg_ban_removed"));                redirect($this->agent->referrer());            } else {                $this->session->set_flashdata('error', trans("msg_error"));                redirect($this->agent->referrer());            }        }    }    /**     * File manager     */    public function file_manager()    {        $this->load->view('admin/includes/_header');        $this->load->view('admin/includes/_file_manager_image');        $this->load->view('admin/includes/_footer');    }    public function backups()    {        prevent_author();        if (!is_admin()) {            $this->session->set_flashdata('error', trans('access_denied'));            redirect('admin');        }        $data['files'] = glob('./uploads/backups/*.zip', GLOB_BRACE);        $data['dbs'] = glob('./uploads/backups/*.txt', GLOB_BRACE);        krsort($data['files']); krsort($data['dbs']);        $data['title'] = trans("backups");        $this->load->view('admin/includes/_header', $data);        $this->load->view('admin/backups', $data);        $this->load->view('admin/includes/_footer');    }    public function backup_database()    {        if (!is_admin()) {            $this->session->set_flashdata('error', trans('access_denied'));            redirect('admin');        }        $this->load->dbutil();        $prefs = array(            'format' => 'txt',            'filename' => 'db_backup.sql'        );        $back = $this->dbutil->backup($prefs);        $backup =& $back;        $db_name = 'db-backup-on-' . date("Y-m-d-H-i-s") . '.txt';        $save = './uploads/backups/' . $db_name;        $this->load->helper('file');        write_file($save, $backup);        $this->session->set_flashdata('messgae', trans('db_saved'));        $this->session->set_flashdata('success', trans("database_backups") . " " . trans("msg_suc_added"));        redirect("admin/backups");    }    public function backup_files()    {        if (!is_admin()) {            $this->session->set_flashdata('error', trans('access_denied'));            redirect("admin");        }        $name = 'file-backup-' . date("Y-m-d-H-i-s");        $this->bcrypt->zip("./", './uploads/backups/', $name);        $this->session->set_flashdata('messgae', trans("database_backups") . " " . trans('msg_suc_added'));            }    public function restore_database($dbfile)    {        if (!is_admin()) {            $this->session->set_flashdata('error', trans('access_denied'));            redirect("admin");        }        $file = file_get_contents('./uploads/backups/' . $dbfile . '.txt');        // $this->db->conn_id->multi_query($file);        mysqli_multi_query($this->db->conn_id, $file);        $this->db->conn_id->close();        redirect('logout');    }    public function download_database($dbfile)    {        if (!is_admin()) {            $this->session->set_flashdata('error', trans('access_denied'));            redirect("admin");        }        $this->load->library('zip');        $this->zip->read_file('./uploads/backups/' . $dbfile . '.txt');        $name = $dbfile . '.zip';        $this->zip->download($name);        exit();    }     public function download_backup($zipfile)    {         if (!is_admin()) {            $this->session->set_flashdata('error', trans('access_denied'));           redirect("admin");       }        $this->load->helper('download');       force_download('./uploads/backups/' . $zipfile . '.zip', NULL);       exit();     }     public function restore_backup($zipfile)    {        if (!is_admin()) {            $this->session->set_flashdata('error', trans('access_denied'));            redirect("admin");        }        $file = './uploads/backups/' . $zipfile . '.zip';        $this->bcrypt->unzip($file, './');        $this->session->set_flashdata('success', trans('files_restored'));        redirect("admin/backups");        exit();    }    public function delete_database($dbfile)    {        if (!is_admin()) {            $this->session->set_flashdata('error', trans('access_denied'));            redirect("admin");        }        unlink('./uploads/backups/' . $dbfile . '.txt');        $this->session->set_flashdata('messgae', trans("database_backups") . " " . trans('msg_suc_deleted'));        redirect("admin/backups");    }    public function delete_backup($zipfile)    {        if (!is_admin()) {            $this->session->set_flashdata('error', trans('access_denied'));            redirect("admin");        }        unlink('./uploads/backups/' . $zipfile . '.zip');        $this->session->set_flashdata('messgae', trans("database_backups") . " " .  trans('msg_suc_deleted'));        redirect("admin/backups");    }    public function uploads()    {        prevent_author();        $data['title'] = trans("media_libraries");        $images = $this->file_model->get_images($this->file_count);        $this->load->view('admin/includes/_header', $data);        $this->load->view('admin/media/media', $data);        $this->load->view('admin/includes/_footer');    }    public function delete_posts()    {        if (!is_admin()) {            $this->session->set_flashdata('error', trans('access_denied'));            redirect("admin");        }        $data['title'] = trans("delete_posts");        $this->load->view('admin/includes/_header', $data);        $this->load->view('admin/bulk_delete/delete_post', $data);        $this->load->view('admin/includes/_footer');    }    public function bulk_delete_posts()    {          $img_option=$this->input->post('img_option');        $date_post=$this->input->post('date_post');        $this->db->where('posts.created_at <= ',$date_post);        $this->db->select('posts.id');        $this->db->from('posts');        $query = $this->db->get();        $results=$query->result();        $this->post_admin_model->delete_bulk_posts($results,$img_option);    }        public function delete_epapers()    {        if (!is_admin()) {            $this->session->set_flashdata('error', trans('access_denied'));            redirect("admin");        }        $data['title'] = trans("delete_epapers");        $this->load->view('admin/includes/_header', $data);        $this->load->view('admin/bulk_delete/delete_epaper', $data);        $this->load->view('admin/includes/_footer');    }   }